// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdProducts Product[]
  auditLogs       AuditLog[]
  reports         Report[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model Product {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String
  sku          String        @unique
  currentStock Int
  minStock     Int
  maxStock     Int
  unitPrice    Decimal       @db.Decimal(10, 2)
  leadTime     Int // in days
  status       ProductStatus @default(IN_STOCK)
  trendScore   Int           @default(5)
  isActive     Boolean       @default(true)
  createdBy    String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  creator          User              @relation(fields: [createdBy], references: [id])
  stockMovements   StockMovement[]
  salesData        SalesData[]
  reorderPoints    ReorderPoint[]
  forecastData     ForecastData[]
  supplierProducts SupplierProduct[]

  @@map("products")
}

enum ProductStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

model StockMovement {
  id        String            @id @default(cuid())
  productId String
  type      StockMovementType
  quantity  Int
  reason    String?
  reference String? // PO number, invoice, etc.
  createdAt DateTime          @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
}

model SalesData {
  id        String   @id @default(cuid())
  productId String
  date      DateTime
  forecast  Int
  actual    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, date])
  @@map("sales_data")
}

model ForecastData {
  id           String   @id @default(cuid())
  productId    String
  forecastDate DateTime
  quantity     Int
  confidence   Decimal  @db.Decimal(5, 2) // 0-100%
  algorithm    String // "linear", "seasonal", "ml"
  createdAt    DateTime @default(now())

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("forecast_data")
}

model ReorderPoint {
  id              String    @id @default(cuid())
  productId       String
  reorderLevel    Int
  reorderQuantity Int
  leadTimeDays    Int
  safetyStock     Int
  isActive        Boolean   @default(true)
  lastTriggered   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id])

  @@map("reorder_points")
}

model Supplier {
  id            String   @id @default(cuid())
  name          String
  email         String?
  phone         String?
  address       String?
  contactPerson String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  supplierProducts SupplierProduct[]

  @@map("suppliers")
}

model SupplierProduct {
  id          String   @id @default(cuid())
  supplierId  String
  productId   String
  cost        Decimal  @db.Decimal(10, 2)
  leadTime    Int // in days
  minOrderQty Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  supplier Supplier @relation(fields: [supplierId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  @@unique([supplierId, productId])
  @@map("supplier_products")
}

model TrendData {
  id        String         @id @default(cuid())
  name      String
  platform  SocialPlatform
  mentions  Int
  change    Decimal        @db.Decimal(5, 2) // percentage
  sentiment String? // "positive", "negative", "neutral"
  keywords  String? // JSON array of related keywords
  createdAt DateTime       @default(now())

  @@map("trend_data")
}

enum SocialPlatform {
  TWITTER
  INSTAGRAM
  TIKTOK
  FACEBOOK
  YOUTUBE
}

model Alert {
  id         String        @id @default(cuid())
  type       AlertType
  title      String
  message    String
  action     String?
  productId  String?
  isRead     Boolean       @default(false)
  isResolved Boolean       @default(false)
  priority   AlertPriority @default(MEDIUM)
  createdAt  DateTime      @default(now())
  resolvedAt DateTime?

  @@map("alerts")
}

enum AlertType {
  STOCK_LOW
  STOCK_OUT
  REORDER_NEEDED
  FORECAST_DEVIATION
  TREND_SPIKE
  SYSTEM_ERROR
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   String? // JSON data
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Report {
  id          String       @id @default(cuid())
  name        String
  type        ReportType
  format      ReportFormat
  params      String? // JSON parameters
  filePath    String?
  status      ReportStatus @default(PENDING)
  createdBy   String
  createdAt   DateTime     @default(now())
  completedAt DateTime?

  // Relations
  creator User @relation(fields: [createdBy], references: [id])

  @@map("reports")
}

enum ReportType {
  INVENTORY_SUMMARY
  SALES_FORECAST
  STOCK_MOVEMENT
  TREND_ANALYSIS
  REORDER_REPORT
}

enum ReportFormat {
  PDF
  EXCEL
  CSV
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
